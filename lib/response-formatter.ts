// Processador M√âDICO ESPECIALIZADO - vers√£o simplificada e limpa

export class ResponseFormatter {
  /**
   * Processa completamente a resposta m√©dica
   */
  static processCompleteResponse(rawResponse: string): string {
    console.log("üîÑ INICIANDO PROCESSAMENTO M√âDICO LIMPO:", rawResponse)

    let processed = rawResponse

    // 1. LIMPEZA B√ÅSICA E REMO√á√ÉO DE JSON
    processed = this.removeJsonAndClean(processed)

    // 2. CONVERS√ÉO DE CARACTERES DE ESCAPE
    processed = this.convertEscapeCharacters(processed)

    // 3. LIMPEZA PROFUNDA DE CARACTERES INDESEJADOS
    processed = this.deepCleanText(processed)

    // 4. ESTRUTURA√á√ÉO M√âDICA SIMPLES
    processed = this.createCleanMedicalStructure(processed)

    // 5. ADICIONAR DISCLAIMER
    processed = this.addMedicalDisclaimer(processed)

    // 6. LIMPEZA FINAL
    processed = this.finalPolish(processed)

    console.log("‚úÖ PROCESSAMENTO M√âDICO LIMPO CONCLU√çDO:", processed)
    return processed
  }

  /**
   * Remove JSON e faz limpeza b√°sica
   */
  private static removeJsonAndClean(text: string): string {
    return (
      text
        .trim()
        // Remove estrutura JSON completa
        .replace(/^\s*\{\s*"resposta"\s*:\s*"?/i, "")
        .replace(/"\s*\}\s*$/i, "")
        // Remove padr√µes espec√≠ficos
        .replace(/^"resposta":\s*###/i, "")
        .replace(/^"resposta":\s*/i, "")
        .replace(/^resposta:\s*###/i, "")
        .replace(/^resposta:\s*/i, "")
        // Remove aspas extras
        .replace(/^"|"$/g, "")
        .trim()
    )
  }

  /**
   * Converte caracteres de escape
   */
  private static convertEscapeCharacters(text: string): string {
    return text
      .replace(/\\n/g, "\n")
      .replace(/\\"/g, '"')
      .replace(/\\t/g, "\t")
      .replace(/\\r/g, "")
      .replace(/\\\\/g, "\\")
  }

  /**
   * LIMPEZA PROFUNDA - Remove todos os caracteres indesejados
   */
  private static deepCleanText(text: string): string {
    return (
      text
        // Remove TODOS os asteriscos
        .replace(/\*/g, "")
        // Remove h√≠fens m√∫ltiplos
        .replace(/--+/g, "-")
        // Remove underscores m√∫ltiplos
        .replace(/__+/g, "")
        // Remove n√∫meros com pontos soltos (ex: 1. 2. 3.)
        .replace(/^\s*\d+\.\s*$/gm, "")
        // Remove linhas com apenas s√≠mbolos
        .replace(/^\s*[-_=+#@!%&*(){}[\]|\\:;"'<>,.?/~`]+\s*$/gm, "")
        // Remove m√∫ltiplas quebras de linha
        .replace(/\n{3,}/g, "\n\n")
        // Remove espa√ßos extras
        .replace(/[ \t]+/g, " ")
        // Remove espa√ßos no in√≠cio/fim de linhas
        .replace(/^[ \t]+|[ \t]+$/gm, "")
        // Remove linhas vazias com espa√ßos
        .replace(/^\s+$/gm, "")
    )
  }

  /**
   * Cria estrutura m√©dica limpa e simples
   */
  private static createCleanMedicalStructure(text: string): string {
    console.log("üèóÔ∏è Criando estrutura m√©dica limpa")

    // Dividir em linhas e limpar
    const lines = text
      .split("\n")
      .map((line) => line.trim())
      .filter((line) => line.length > 0)
      .filter((line) => !this.isJunkLine(line))

    if (lines.length === 0) {
      return "Resposta n√£o p√¥de ser processada adequadamente."
    }

    let structured = ""
    let currentContent: string[] = []

    // Detectar se j√° tem estrutura de t√≠tulos
    const hasExistingStructure = lines.some(
      (line) => line.startsWith("##") || line.startsWith("#") || this.detectMedicalSection(line),
    )

    if (hasExistingStructure) {
      // Processar estrutura existente
      for (const line of lines) {
        if (this.isTitle(line)) {
          // Finalizar se√ß√£o anterior
          if (currentContent.length > 0) {
            structured += this.formatContentLines(currentContent) + "\n\n"
            currentContent = []
          }
          // Adicionar t√≠tulo limpo
          structured += this.cleanTitle(line) + "\n\n"
        } else {
          currentContent.push(line)
        }
      }

      // Finalizar √∫ltima se√ß√£o
      if (currentContent.length > 0) {
        structured += this.formatContentLines(currentContent)
      }
    } else {
      // Criar estrutura b√°sica
      structured = "## Orienta√ß√µes M√©dicas\n\n"
      structured += this.formatContentLines(lines)
    }

    return structured.trim()
  }

  /**
   * Verifica se √© uma linha lixo
   */
  private static isJunkLine(line: string): boolean {
    const junkPatterns = [
      /^\s*[-_=+#@!%&*(){}[\]|\\:;"'<>,.?/~`]+\s*$/, // Apenas s√≠mbolos
      /^\s*\d+\.\s*$/, // Apenas n√∫meros
      /^\s*[a-zA-Z]\.\s*$/, // Apenas letras
      /^resposta:/i, // Palavra "resposta:"
    ]

    return junkPatterns.some((pattern) => pattern.test(line)) || line.length < 3
  }

  /**
   * Verifica se √© um t√≠tulo
   */
  private static isTitle(line: string): boolean {
    return line.startsWith("##") || line.startsWith("#") || this.detectMedicalSection(line) !== null
  }

  /**
   * Limpa t√≠tulo removendo s√≠mbolos desnecess√°rios
   */
  private static cleanTitle(line: string): string {
    return line
      .replace(/^#+\s*/, "## ") // Padronizar t√≠tulos
      .replace(/[*_]/g, "") // Remove formata√ß√£o
      .trim()
  }

  /**
   * Detecta se√ß√µes m√©dicas espec√≠ficas
   */
  private static detectMedicalSection(line: string): string | null {
    const cleanLine = line
      .replace(/^#+\s*/, "")
      .replace(/[*_]/g, "")
      .toLowerCase()
      .trim()

    const medicalSections = [
      "orienta√ß√µes",
      "orienta√ß√£o",
      "medica√ß√£o",
      "medica√ß√µes",
      "prescri√ß√£o",
      "tratamento",
      "contraindica√ß√µes",
      "cuidados",
      "diagn√≥stico",
      "patologia",
      "posologia",
      "dosagem",
    ]

    return medicalSections.find((section) => cleanLine.includes(section)) || null
  }

  /**
   * Formata linhas de conte√∫do de forma simples
   */
  private static formatContentLines(lines: string[]): string {
    return lines
      .map((line) => {
        const cleaned = line.trim()

        // Se j√° come√ßa com h√≠fen, manter
        if (cleaned.startsWith("-")) {
          return cleaned
        }

        // Se √© uma frase completa, adicionar h√≠fen
        if (cleaned.length > 10 && (cleaned.includes(" ") || cleaned.endsWith("."))) {
          return `- ${cleaned}`
        }

        // Caso contr√°rio, retornar como est√°
        return cleaned
      })
      .filter((line) => line.trim().length > 0)
      .join("\n")
  }

  /**
   * Adiciona disclaimer m√©dico
   */
  private static addMedicalDisclaimer(text: string): string {
    const disclaimer = `\n\n---\n\n*Este aplicativo tem apenas a fun√ß√£o de facilitar a pr√°tica m√©dica, lembre-se que podem existir erros e n√£o deve ser utilizado como fonte prim√°ria de pesquisa. Considere verificar informa√ß√µes importantes. Uso por conta e risco.*`

    return text + disclaimer
  }

  /**
   * Polimento final
   */
  private static finalPolish(text: string): string {
    return (
      text
        // Remove linhas vazias excessivas
        .replace(/\n{3,}/g, "\n\n")
        // Remove espa√ßos extras
        .replace(/[ \t]+/g, " ")
        // Remove espa√ßos no in√≠cio/fim de linhas
        .replace(/^[ \t]+|[ \t]+$/gm, "")
        // Garante espa√ßamento ap√≥s t√≠tulos
        .replace(/^(##[^\n]+)$/gm, "$1\n")
        // Remove linhas vazias no in√≠cio e fim
        .trim()
    )
  }

  /**
   * M√©todo p√∫blico para formata√ß√£o m√©dica
   */
  static formatMedicalResponse(rawText: string): string {
    return this.processCompleteResponse(rawText)
  }
}
